DROP TABLE A2ERROREVENT;
CREATE TABLE A2ERROREVENT (
ERRORID       INTEGER,
SOURCE_ROWID  ROWID,
SOURCE_TABLE  VARCHAR2(30),
ERRORCODE     INTEGER,
FILTERID      INTEGER,
DATETIME      DATE,
ACTION        VARCHAR2(6),
CONSTRAINT    ERROREVENTACTION
CHECK (ACTION IN ('SKIP','MODIFY'))
);

DROP SEQUENCE A2ERROR_SEQ;
CREATE SEQUENCE A2ERROR_SEQ;

DROP TABLE DWPROD;
DROP TABLE DWCUST;
DROP TABLE DWSALE;

CREATE TABLE DWPROD (
DWPRODID      NUMBER(38),
DWSOURCETABLE VARCHAR2(30),
DWSOURCEID    INTEGER,
PRODNAME      VARCHAR2(100),
PRODCATNAME   VARCHAR2(38),
PRODMANUNAME  VARCHAR2(38),
PRODSHIPNAME  VARCHAR2(38),
PRIMARY KEY (DWPRODID)
);

DROP SEQUENCE DWPROD_SEQ;
CREATE SEQUENCE DWPROD_SEQ;

CREATE TABLE DWCUST  (
DWCUSTID        NUMBER(38),
DWSOURCEIDBRIS  INTEGER,
DWSOURCEIDMELB  INTEGER,
FIRSTNAME       VARCHAR2(30),
SURNAME         VARCHAR2(30),
GENDER          VARCHAR2(10),
PHONE           VARCHAR2(20),
POSTCODE        NUMBER(4),
CITY            VARCHAR(50),
STATE           VARCHAR2(10),
CUSTCATNAME     VARCHAR2(38),
PRIMARY KEY (DWCUSTID)
);

DROP SEQUENCE DWCUST_SEQ;
CREATE SEQUENCE DWCUST_SEQ;

CREATE TABLE DWSALE  (
DWSALEID        NUMBER(38),
DWCUSTID        NUMBER(38),
DWPRODID        NUMBER(38),
DWSOURCEIDBRIS  INTEGER,
DWSOURCEIDMELB  INTEGER,
QTY             NUMBER(2),
SALE_DWDATEID   NUMBER(38),
SHIP_DWDATEID   NUMBER(38),
SALEPRICE       NUMBER(7,2),
PRIMARY KEY (DWSALEID)
);

DROP SEQUENCE DWSALE_SEQ;
CREATE SEQUENCE DWSALE_SEQ;

DROP TABLE GENDERSPELLING;

CREATE TABLE GENDERSPELLING (
INVALID_VALUE VARCHAR2(10),
NEW_VALUE VARCHAR2(10)
);

INSERT INTO GENDERSPELLING VALUES ('MAIL', 'M');
INSERT INTO GENDERSPELLING VALUES ('WOMAN', 'F');
INSERT INTO GENDERSPELLING VALUES ('FEM', 'F');
INSERT INTO GENDERSPELLING VALUES ('FEMALE', 'F');
INSERT INTO GENDERSPELLING VALUES ('MALE', 'M');
INSERT INTO GENDERSPELLING VALUES ('GENTLEMAN', 'M');
INSERT INTO GENDERSPELLING VALUES ('MM', 'M');
INSERT INTO GENDERSPELLING VALUES ('FF', 'F');
INSERT INTO GENDERSPELLING VALUES ('FEMAIL', 'F');


/*PART 2. PRODUCT TRANSFER
Task 2.1
filter #1
a
*/
insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2PRODUCT',105,1,SYSDATE,'SKIP' from A2PRODUCT where PRODNAME is null;
/*

TESTING
b

*/
select * from A2ERROREVENT;

/*
TASK 2.2
    FILTET #2
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2PRODUCT',131,2,SYSDATE,'MODIFY' from A2PRODUCT where MANUFACTURERCODE is null;

/*
PART b  TESTING

*/
SELECT * from A2ERROREVENT;


/*
TASK 2.3
    FILTET #3
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2PRODUCT',146,3,SYSDATE,'MODIFY' from A2PRODUCT
where A2PRODUCT.PRODCATEGORY NOT IN
(SELECT A2PRODCATEGORY.PRODUCTCATEGORY FROM A2PRODCATEGORY) or
(PRODCATEGORY is null);

/*
PART b  TESTING

*/

SELECT * from A2ERROREVENT;
/*
TASK 2.4.3

a
*/

insert into DWPROD(DWPRODID, DWSOURCETABLE,DWSOURCEID,PRODNAME,PRODCATNAME,PRODMANUNAME,PRODSHIPNAME)
select DWPROD_SEQ.NEXTVAL,'A2PRODUCT',a2product.prodid,a2product.prodname,
(SELECT A2PRODCATEGORY.PRODUCTCATEGORY FROM A2PRODCATEGORY
WHERE A2PRODCATEGORY.PRODUCTCATEGORY = A2PRODUCT.PRODCATEGORY),
(SELECT MANUNAME FROM A2MANUFACTURER WHERE MANUCODE = A2PRODUCT.MANUFACTURERCODE),
(SELECT DESCRIPTION FROM A2SHIPPING WHERE SHIPPINGCODE = A2PRODUCT.SHIPPINGCODE)
From A2PRODUCT Where ROWID NOT IN
( SELECT SOURCE_ROWID FROM A2ERROREVENT );


/*
  TESTING

*/

SELECT * from DWPROD;
/*
TASK 2.4.4

B
*/

insert into DWPROD(DWPRODID, DWSOURCETABLE,DWSOURCEID,PRODNAME,PRODCATNAME,PRODMANUNAME,PRODSHIPNAME)

select DWPROD_SEQ.NEXTVAL,'A2PRODUCT',a2product.prodid,a2product.prodname,

(SELECT A2PRODCATEGORY.PRODUCTCATEGORY FROM A2PRODCATEGORY
WHERE A2PRODCATEGORY.PRODUCTCATEGORY = A2PRODUCT.PRODCATEGORY),
'UNKNOWN',
(SELECT DESCRIPTION FROM A2SHIPPING WHERE SHIPPINGCODE = A2PRODUCT.SHIPPINGCODE)
FROM A2PRODUCT WHERE A2PRODUCT.ROWID IN
(SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE A2ERROREVENT.FILTERID=2);

/*
  TESTING

*/
SELECT * from DWPROD;



/*
TASK 2.4.5

C
*/
insert into DWPROD(DWPRODID, DWSOURCETABLE,DWSOURCEID,PRODNAME,PRODCATNAME,PRODMANUNAME,PRODSHIPNAME)

select DWPROD_SEQ.NEXTVAL,'A2PRODUCT',a2product.prodid,a2product.prodname,

(SELECT A2PRODCATEGORY.PRODUCTCATEGORY FROM A2PRODCATEGORY
WHERE A2PRODCATEGORY.PRODUCTCATEGORY = A2PRODUCT.PRODCATEGORY),
'UNKNOWN',
(SELECT DESCRIPTION FROM A2SHIPPING WHERE SHIPPINGCODE = A2PRODUCT.SHIPPINGCODE)
FROM A2PRODUCT WHERE A2PRODUCT.ROWID IN
(SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE A2ERROREVENT.FILTERID=3);


/*
  TESTING

*/
SELECT * from DWPROD;

/*PART 3. CUSTOMER BRISBANE TRANSFER
Task 3.1
filter #4
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2CUSTBRIS',167,4,SYSDATE,'MODIFY' from A2CUSTBRIS WHERE

NOT EXISTS (SELECT CUSTCATCODE FROM A2CUSTCATEGORY where A2CUSTBRIS.CUSTCATCODE = A2CUSTCATEGORY.CUSTCATCODE );



/*
PART B
  TESTING
*/

SELECT * from A2ERROREVENT;

/*
Task 3.2
filter #5
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2CUSTBRIS',194,5,SYSDATE,'MODIFY' from A2CUSTBRIS

 WHERE PHONE LIKE '%-%' OR PHONE LIKE '% %';

/*
PART B
  TESTING
  SELECT * from A2ERROREVENT;
*/




/*
Task 3.3
filter #6
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2CUSTBRIS',219,6,SYSDATE,'MODIFY' from A2CUSTBRIS

 WHERE PHONE NOT LIKE '%-%' AND PHONE NOT LIKE '% %' AND length(phone)!=10;


/*
PART B
  TESTING

*/
SELECT * from A2ERROREVENT;
/*
Task 3.4
filter #7
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2CUSTBRIS',227,7,SYSDATE,'MODIFY' from A2CUSTBRIS

WHERE GENDER NOT IN ('M','F','m','f') OR GENDER is null;



/*
PART B
  TESTING

*/
SELECT * from A2ERROREVENT;


/*
Task 3.5.1
*/
DESCRIBE DWCUST;

insert into DWCUST (DWCUSTID, DWSOURCEIDBRIS, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL,
A2CUSTBRIS.CUSTID,
NULL,
A2CUSTBRIS.FNAME,
A2CUSTBRIS.SNAME,
UPPER(A2CUSTBRIS.GENDER),
A2CUSTBRIS.PHONE,
A2CUSTBRIS.POSTCODE,
A2CUSTBRIS.CITY,
A2CUSTBRIS.STATE,
(SELECT CUSTCATNAME FROM A2CUSTCATEGORY WHERE A2CUSTCATEGORY.CUSTCATCODE = A2CUSTBRIS.CUSTCATCODE)
FROM A2CUSTBRIS WHERE A2CUSTBRIS.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT);

/*
PART B
  TESTING

*/
SELECT * from DWCUST;


/*
Task 3.5.2
a

*/

 insert into DWCUST (DWCUSTID, DWSOURCEIDBRIS, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE,CUSTCATNAME)
select DWCUST_SEQ.NEXTVAL,A2CUSTBRIS.CUSTID,
NULL,
A2CUSTBRIS.FNAME,
A2CUSTBRIS.SNAME,
UPPER(A2CUSTBRIS.GENDER),
A2CUSTBRIS.PHONE, A2CUSTBRIS.POSTCODE, A2CUSTBRIS.CITY, A2CUSTBRIS.STATE, 'UNKNOWN'
FROM A2CUSTBRIS WHERE A2CUSTBRIS.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE A2ERROREVENT.FILTERID=4);

/*
PART B
  TESTING

*/
SELECT * from DWCUST;


/*
Task 3.5.3
a
*/
insert into DWCUST (DWCUSTID, DWSOURCEIDBRIS, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL,
A2CUSTBRIS.CUSTID,
NULL,
A2CUSTBRIS.FNAME,
A2CUSTBRIS.SNAME,
UPPER(A2CUSTBRIS.GENDER),
replace(replace (A2CUSTBRIS.PHONE,'-',''),' ',''),
A2CUSTBRIS.POSTCODE,
A2CUSTBRIS.CITY,
A2CUSTBRIS.STATE,
(SELECT CUSTCATNAME FROM A2CUSTCATEGORY WHERE A2CUSTCATEGORY.CUSTCATCODE = A2CUSTBRIS.CUSTCATCODE)
FROM A2CUSTBRIS WHERE
A2CUSTBRIS.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT  WHERE A2ERROREVENT.FILTERID=5);
/*
PART B
  TESTING

*/
SELECT * from DWCUST;

/*
Task 3.5.4
a
*/
INSERT INTO DWCUST (DWCUSTID, DWSOURCEIDBRIS, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL,A2CUSTBRIS.CUSTID,
NULL,
A2CUSTBRIS.FNAME,
A2CUSTBRIS.SNAME,
    (CASE
        WHEN  UPPER(A2CUSTBRIS.GENDER) IN (SELECT INVALID_VALUE FROM GENDERSPELLING) THEN
            (SELECT NEW_VALUE FROM GENDERSPELLING WHERE  UPPER(A2CUSTBRIS.GENDER) = GENDERSPELLING.INVALID_VALUE)
        ELSE 'U'
    END
    ),
replace(replace (A2CUSTBRIS.PHONE,'-',''),' ',''),
A2CUSTBRIS.POSTCODE,
A2CUSTBRIS.CITY,
A2CUSTBRIS.STATE,
(SELECT CUSTCATNAME FROM A2CUSTCATEGORY WHERE A2CUSTCATEGORY.CUSTCATCODE = A2CUSTBRIS.CUSTCATCODE)
FROM A2CUSTBRIS WHERE
A2CUSTBRIS.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT  WHERE A2ERROREVENT.FILTERID=7);

/*
PART B
  TESTING

*/

SELECT * from DWCUST;




/*
PART 4. CUSTOMER MELBOURNE TRANSFER (CREDIT LEVEL TASK)
Task 4.1
A
*/

MERGE INTO DWCUST USING A2CUSTMELB
ON (A2CUSTMELB.FNAME = DWCUST.FIRSTNAME AND A2CUSTMELB.SNAME = DWCUST.SURNAME AND A2CUSTMELB.POSTCODE = DWCUST.POSTCODE)
WHEN MATCHED
THEN UPDATE SET
DWCUST.DWSOURCEIDMELB=A2CUSTMELB.CUSTID
WHEN NOT MATCHED
THEN INSERT
(DWCUSTID, DWSOURCEIDBRIS, DWSOURCEIDMELB, FIRSTNAME,SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
VALUES
(DWCUST_SEQ.NEXTVAL,
(SELECT A2CUSTBRIS.CUSTID FROM A2CUSTBRIS FULL JOIN A2CUSTMELB ON A2CUSTMELB.CUSTID=A2CUSTBRIS.CUSTID WHERE ROWNUM=1),
A2CUSTMELB.CUSTID, A2CUSTMELB.FNAME, A2CUSTMELB.SNAME,
A2CUSTMELB.GENDER, A2CUSTMELB.PHONE, A2CUSTMELB.POSTCODE,
A2CUSTMELB.CITY, A2CUSTMELB.STATE,
(SELECT A2CUSTCATEGORY.CUSTCATNAME FROM A2CUSTCATEGORY FULL JOIN A2CUSTMELB
ON A2CUSTMELB.CUSTCATCODE=A2CUSTCATEGORY.CUSTCATCODE WHERE ROWNUM=1));

/*
Task 4.1
B

*/
SELECT * FROM DWCUST;


/*

Task 4.2
TESTING
Run the script to make sure it is error free.

*/


/*
PART 5. BRISBANE SALES TRANSFER (CREDIT LEVEL TASK)
Task 5.1
Filter #8
A
*/

INSERT INTO A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
SELECT A2ERROR_SEQ.NEXTVAL, ROWID, 'A2SALEBRIS', 258, 8, SYSDATE, 'SKIP' FROM A2SALEBRIS
WHERE NOT EXISTS (SELECT NULL FROM DWPROD WHERE A2SALEBRIS.PRODID=DWPROD.DWSOURCEID);

/*
Task 5.1
B

*/
SELECT * FROM A2ERROREVENT;


/*
Task 5.2
Filter #9
A
*/

INSERT INTO A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
SELECT A2ERROR_SEQ.NEXTVAL, ROWID, 'A2SALEBRIS', 262, 9, SYSDATE, 'SKIP' FROM A2SALEBRIS
WHERE NOT EXISTS (SELECT NULL FROM DWCUST WHERE A2SALEBRIS.CUSTID = DWCUST.DWSOURCEIDBRIS);

/*
Task 5.2

B
*/
SELECT * FROM A2ERROREVENT;


/*
Task 5.3
Filter #10
A
*/

INSERT INTO A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
SELECT A2ERROR_SEQ.NEXTVAL, ROWID, 'A2SALEBRIS', 294, 10, SYSDATE, 'MODIFY'
FROM A2SALEBRIS
WHERE SHIPDATE < SALEDATE;

/*
Task 5.3
B

*/

SELECT * FROM A2ERROREVENT;

/*
Task 5.4
Filter #11
A
*/

INSERT INTO A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
SELECT A2ERROR_SEQ.NEXTVAL, ROWID, 'A2SALEBRIS', 312, 11, SYSDATE, 'MODIFY'
FROM A2SALEBRIS WHERE UNITPRICE IS NULL;

/*
Task 5.4
B

*/
SELECT * FROM A2ERROREVENT;


/*
Task 5.5
A
*/

INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, DWSOURCEIDMELB, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_SEQ.NEXTVAL,
DWCUST.DWCUSTID, DWPROD.DWPRODID, A2SALEBRIS.SALEID,
A2SALEMELB.SALEID, A2SALEBRIS.QTY,
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEBRIS.SALEDATE),
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEBRIS.SHIPDATE),
A2SALEBRIS.UNITPRICE
FROM A2SALEBRIS
FULL JOIN DWCUST ON DWCUST.DWSOURCEIDBRIS=A2SALEBRIS.CUSTID
FULL JOIN DWPROD ON DWPROD.DWSOURCEID=A2SALEBRIS.PRODID
FULL JOIN A2SALEMELB ON A2SALEMELB.SALEID=A2SALEBRIS.SALEID
WHERE A2SALEBRIS.ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT);

/*
Task 5.5
B

*/

SELECT * FROM DWSALE;


/*
Task 5.6
A
*/

INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, DWSOURCEIDMELB, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_SEQ.NEXTVAL,
DWCUST.DWCUSTID, DWPROD.DWPRODID, A2SALEBRIS.SALEID,
A2SALEMELB.SALEID, A2SALEBRIS.QTY,
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEBRIS.SALEDATE),
((SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEBRIS.SALEDATE)+2),
A2SALEBRIS.UNITPRICE
FROM A2SALEBRIS
FULL JOIN DWCUST ON DWCUST.DWSOURCEIDBRIS=A2SALEBRIS.CUSTID
FULL JOIN DWPROD ON DWPROD.DWSOURCEID=A2SALEBRIS.PRODID
FULL JOIN A2SALEMELB ON A2SALEMELB.SALEID=A2SALEBRIS.SALEID
WHERE A2SALEBRIS.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID=10);

/*
Task 5.5
B

*/

SELECT * FROM DWSALE;


/*
Task 5.7
A
*/

INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, DWSOURCEIDMELB, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT DWSALE_SEQ.NEXTVAL,
DWCUST.DWCUSTID, DWPROD.DWPRODID, A2SALEBRIS.SALEID,
A2SALEMELB.SALEID, A2SALEBRIS.QTY,
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEBRIS.SALEDATE),
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEBRIS.SHIPDATE),
(SELECT MAX(UNITPRICE) FROM A2SALEBRIS WHERE PRODID = DWPROD.DWSOURCEID)
FROM A2SALEBRIS
FULL JOIN DWCUST ON DWCUST.DWSOURCEIDBRIS=A2SALEBRIS.CUSTID
FULL JOIN DWPROD ON DWPROD.DWSOURCEID=A2SALEBRIS.PRODID
FULL JOIN A2SALEMELB ON A2SALEMELB.SALEID=A2SALEBRIS.SALEID
WHERE A2SALEBRIS.ROWID IN (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE FILTERID=11);


/*
Task 5.7
B

*/
SELECT * FROM DWSALE;



/*
Task 5.8
TESTING
Run the script to make sure it is error free.
*/
/*
Part 6  melbourne sales transfer
Task 6.1
filter 12
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)

select A2ERROR_SEQ.NEXTVAL,ROWID,'A2SALEMELB',328,12,SYSDATE,'SKIP' from  A2SALEMELB where PRODID NOT IN
(SELECT DWPROD.DWSOURCEID FROM DWPROD) OR PRODID IS NULL;
/*
PART B
  TESTING

*/


SELECT * FROM A2ERROREVENT;
/*
Task 6.2
filter 13
a
*/

INSERT INTO A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
SELECT A2ERROR_SEQ.NEXTVAL,ROWID,'A2SALEMELB',349,13,SYSDATE,'SKIP' FROM  A2SALEMELB WHERE NOT EXISTS (SELECT NULL 
FROM DWCUST WHERE A2SALEMELB.CUSTID=DWCUST.DWSOURCEIDMELB);


/*
PART B
  TESTING

*/

SELECT * FROM A2ERROREVENT;

/*
Task 6.3
filter 14
a
*/

insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
select A2ERROR_SEQ.NEXTVAL,ROWID,'A2SALEMELB',371,14,SYSDATE,'MODIFY' from  A2SALEMELB where  SHIPDATE < SALEDATE;

/*
PART B
  TESTING

*/
SELECT * FROM A2ERROREVENT;


/*
Task 6.4
filter 15
a
*/
insert into A2ERROREVENT(ERRORID, SOURCE_ROWID,SOURCE_TABLE,ERRORCODE,FILTERID,DATETIME,ACTION)
select A2ERROR_SEQ.NEXTVAL,ROWID,'A2SALEMELB',393,15,SYSDATE,'MODIFY' from  A2SALEMELB where UNITPRICE IS NULL;

/*
PART B
  TESTING

*/
SELECT * FROM A2ERROREVENT;
/*
Task 6.5
*/

INSERT INTO DWSALE (DWSALEID,DWCUSTID,DWPRODID,DWSOURCEIDBRIS,DWSOURCEIDMELB,QTY,SALE_DWDATEID,SHIP_DWDATEID,SALEPRICE)
SELECT DWSALE_SEQ.NEXTVAL,
(SELECT DWCUSTID FROM DWCUST WHERE DWCUST.DWSOURCEIDMELB = A2SALEMELB.CUSTID),
(SELECT DWPRODID FROM DWPROD WHERE DWPROD.DWSOURCEID = A2SALEMELB.PRODID),
NULL,
A2SALEMELB.SALEID,
A2SALEMELB.QTY,
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEMELB.SALEDATE),
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEMELB.SHIPDATE),
A2SALEMELB.UNITPRICE
FROM A2SALEMELB WHERE ROWID NOT IN
(SELECT SOURCE_ROWID FROM A2ERROREVENT);

/*

PART B
  TESTING

*/
SELECT * FROM DWSALE;


/*
Task 6.6
*/

INSERT INTO DWSALE (DWSALEID,DWCUSTID,DWPRODID,DWSOURCEIDBRIS,DWSOURCEIDMELB,QTY,SALE_DWDATEID,SHIP_DWDATEID,SALEPRICE)
SELECT DWSALE_SEQ.NEXTVAL,
(SELECT DWCUSTID FROM DWCUST WHERE DWCUST.DWSOURCEIDMELB = A2SALEMELB.CUSTID),
(SELECT DWPRODID FROM DWPROD WHERE DWPROD.DWSOURCEID = A2SALEMELB.PRODID),
NULL,
A2SALEMELB.SALEID,
A2SALEMELB.QTY,
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEMELB.SALEDATE),
((SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEMELB.SHIPDATE)+2),
A2SALEMELB.UNITPRICE
FROM A2SALEMELB WHERE ROWID  IN
(SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE A2ERROREVENT.FILTERID=14);

/*
PART B
  TESTING

*/
SELECT * FROM DWSALE;

/*
Task 6.7
not compelted yet
*/

INSERT INTO DWSALE (DWSALEID,DWCUSTID,DWPRODID,DWSOURCEIDBRIS,DWSOURCEIDMELB,QTY,SALE_DWDATEID,SHIP_DWDATEID,SALEPRICE)
SELECT DWSALE_SEQ.NEXTVAL,
(SELECT DWCUSTID FROM DWCUST WHERE DWCUST.DWSOURCEIDMELB = A2SALEMELB.CUSTID),
(SELECT DWPRODID FROM DWPROD WHERE DWPROD.DWSOURCEID = A2SALEMELB.PRODID),
NULL,
A2SALEMELB.SALEID,
A2SALEMELB.QTY,
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEMELB.SALEDATE),
(SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = A2SALEMELB.SHIPDATE),
(SELECT MAX(A2SALEMELB.UNITPRICE) FROM A2SALEMELB WHERE A2SALEMELB.PRODID = DWPROD.DWSOURCEID )

FROM A2SALEMELB  inner join  DWPROD  ON A2SALEMELB.PRODID = DWPROD.DWSOURCEID
WHERE A2SALEMELB.ROWID  IN
(SELECT SOURCE_ROWID FROM A2ERROREVENT  WHERE A2ERROREVENT.FILTERID=15);

SELECT * FROM A2ERROREVENT;

/*
PART B
  TESTING
*/
SELECT * FROM DWSALE;
/*
PART 7. MELBOURNE SALES TRANSFER (ADVANCED) (DISTINCTION LEVEL TASK)
Task 7.1
A
*/

DELETE
FROM DWSALE WHERE DWSALE.DWSOURCEIDMELB IN
(SELECT SALEID FROM A2SALEMELB
  WHERE
  A2SALEMELB.ROWID IN
    (SELECT SOURCE_ROWID FROM A2ERROREVENT
      WHERE SOURCE_TABLE = 'A2SALEMELB'
      GROUP BY
      SOURCE_ROWID HAVING COUNT(SOURCE_ROWID)>1)
);

/*Task 7.1
B
*/
SELECT * FROM DWSALE;

